{
	"info": {
		"_postman_id": "70f7aecc-d013-4351-be79-41bb6a10b116",
		"name": "UserAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33024937"
	},
	"item": [
		{
			"name": "Create user with all fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsondata = pm.response.json();\r",
							"pm.collectionVariables.set(\"userID\", jsondata.user_id);\r",
							"\r",
							"commonTests.validPostRequest();\r",
							"commonTests.responseTime();\r",
							"commonTests.headerValidations();\r",
							"commonTests.schemaValidation();\r",
							"\r",
							"pm.test(\"Data validations in the response body\", () => {\r",
							"pm.expect(jsondata.user_id).is.not.null;\r",
							"pm.expect(jsondata.user_first_name).to.be.equal(pm.iterationData.get(\"firstName\"));\r",
							"pm.expect(jsondata.user_last_name).to.be.equal(pm.iterationData.get(\"lastName\"));\r",
							"pm.expect(jsondata.user_contact_number).to.be.equal(pm.iterationData.get(\"contactNumber\"));\r",
							"pm.expect(jsondata.user_email_id).to.be.equal(pm.iterationData.get(\"emailID\"));\r",
							"pm.expect(jsondata.creation_time).is.not.null;\r",
							"pm.expect(jsondata.last_mod_time).is.not.null;\r",
							"pm.expect(jsondata.userAddress.addressId).is.not.null;\r",
							"pm.expect(jsondata.userAddress.plotNumber).to.be.equal(pm.iterationData.get(\"plotNumber\"));\r",
							"pm.expect(jsondata.userAddress.street).to.be.equal(pm.iterationData.get(\"street\"));\r",
							"pm.expect(jsondata.userAddress.state).to.be.equal(pm.iterationData.get(\"state\"));\r",
							"pm.expect(jsondata.userAddress.country).to.be.equal(pm.iterationData.get(\"country\"));\r",
							"pm.expect(jsondata.userAddress.zipCode).to.be.equal(pm.iterationData.get(\"zipCode\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user without authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.unauthorizedRequest();\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const jar = pm.cookies.jar();\r",
							"jar.clear(pm.request.url, function (error) {\r",
							"    console.log(\"Error: \");\r",
							"    console.log(error);\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with only mandatory fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsondata = pm.response.json();\r",
							"pm.collectionVariables.set(\"firstName\", jsondata.user_first_name);\r",
							"\r",
							"commonTests.validPostRequest();\r",
							"commonTests.responseTime();\r",
							"commonTests.headerValidations();\r",
							"commonTests.schemaValidation();\r",
							"\r",
							"pm.test(\"Data validations in the response body\", () => {\r",
							"pm.expect(jsondata.user_id).is.not.null;\r",
							"pm.expect(jsondata.user_first_name).to.be.equal(pm.iterationData.get(\"firstName\"));\r",
							"pm.expect(jsondata.user_last_name).to.be.equal(pm.iterationData.get(\"lastName\"));\r",
							"pm.expect(jsondata.user_contact_number).to.be.equal(pm.iterationData.get(\"contactNumber\"));\r",
							"pm.expect(jsondata.user_email_id).to.be.equal(pm.iterationData.get(\"emailID\"));\r",
							"pm.expect(jsondata.creation_time).is.not.null;\r",
							"pm.expect(jsondata.last_mod_time).is.not.null;\r",
							"pm.expect(jsondata.userAddress.addressId).is.not.null;\r",
							"pm.expect(jsondata.userAddress.plotNumber).is.null;\r",
							"pm.expect(jsondata.userAddress.street).is.null;\r",
							"pm.expect(jsondata.userAddress.state).is.null;\r",
							"pm.expect(jsondata.userAddress.country).is.null;\r",
							"pm.expect(jsondata.userAddress.zipCode).is.null;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"delete parsedBody.userAddress.plotNumber;\r",
							"delete parsedBody.userAddress.street;\r",
							"delete parsedBody.userAddress.state;\r",
							"delete parsedBody.userAddress.country;\r",
							"delete parsedBody.userAddress.zipCode;\r",
							"\r",
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"pm.request.body.raw = JSON.stringify(parsedBody); \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with only non-mandatory fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"delete parsedBody.user_first_name;\r",
							"delete parsedBody.user_last_name;\r",
							"delete parsedBody.user_contact_number;\r",
							"delete parsedBody.user_email_id;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody); \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user without contactNumber",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Missing contact number error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"Phone Number is required and should contains 10 numeric values only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"delete parsedBody.user_contact_number;\r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody); \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with firstName containing numbers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"First name containing numbers error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"user FirstName is mandatory and should contains alphabets only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"desiredLength\", 10);\r",
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomAlphanumeric = pm.environment.get(\"randomAlphanumeric\");\r",
							"\r",
							"parsedBody.user_first_name = randomAlphanumeric;\r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with firstName containing special characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"First name containing numbers error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"user FirstName is mandatory and should contains alphabets only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomSpecialCharacters = pm.environment.get(\"randomSpecialCharacters\");\r",
							"\r",
							"parsedBody.user_first_name = parsedBody.user_first_name + randomSpecialCharacters;\r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with lastName containing numbers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Last name containing numbers error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"user LastName is mandatory and should contains alphabets only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"desiredLength\", 10);\r",
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomAlphanumeric = pm.environment.get(\"randomAlphanumeric\");\r",
							"\r",
							"parsedBody.user_last_name = randomAlphanumeric;\r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with lastName containing special characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Last name containing numbers error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"user LastName is mandatory and should contains alphabets only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomSpecialCharacters = pm.environment.get(\"randomSpecialCharacters\");\r",
							"\r",
							"parsedBody.user_last_name = parsedBody.user_last_name + randomSpecialCharacters;\r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with contactNumber containing alphabets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Contact number containing alphabets error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"Phone Number is required and should contains 10 numeric values only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"desiredLength\", 10);\r",
							"\r",
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomAlphanumeric = pm.environment.get(\"randomAlphanumeric\");\r",
							"\r",
							"parsedBody.user_contact_number = randomAlphanumeric;\r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with existing contactNumber",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.conflictRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Contact number already exists error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"User already exist with same contact number\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"parsedBody.user_contact_number = pm.iterationData.get(\"existing_contactNumber\");\r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with existing emailID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.conflictRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"emailID already exists error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"User already exist with same email id\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"parsedBody.user_email_id = pm.iterationData.get(\"existing_emailID\");\r",
							"\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with contactNumber exceeding 10 digits",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Contact number exceeding 10 digits error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"Phone Number is required and should contains 10 numeric values only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_contact_number = parsedBody.user_contact_number + randomNumber;\r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with contactNumber containing special characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Contact number containing special characters error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"Phone Number is required and should contains 10 numeric values only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomSpecialCharacters = pm.environment.get(\"randomSpecialCharacters\");\r",
							"\r",
							"parsedBody.user_contact_number = randomSpecialCharacters;\r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with email containing special characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Email ID containing special characters error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"User email Id is required and should be in proper email format\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomSpecialCharacters = pm.environment.get(\"randomSpecialCharacters\");\r",
							"\r",
							"parsedBody.user_email_id = parsedBody.user_email_id+randomSpecialCharacters;\r",
							"\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with email with incorrect format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Email ID with incorrect format error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"User email Id is required and should be in proper email format\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomAlphanumeric = pm.environment.get(\"randomAlphanumeric\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphanumeric;\r",
							"\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with plotNumber containing alphanumeral",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"PlotNumber containing only alphanumeral without hypen error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"Plot number should contain alphaNumeric values with '-' only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"desiredLength\", 5);\r",
							"\r",
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomAlphanumeric = pm.environment.get(\"randomAlphanumeric\");\r",
							"\r",
							"parsedBody.userAddress.plotNumber = randomAlphanumeric;\r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with plotNumber containing special characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"PlotNumber containing special characters error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"Plot number should contain alphaNumeric values with '-' only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomSpecialCharacters = pm.environment.get(\"randomSpecialCharacters\");\r",
							"\r",
							"parsedBody.userAddress.plotNumber = parsedBody.userAddress.plotNumber + randomSpecialCharacters;\r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with street containing numbers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.validPostRequest();\r",
							"commonTests.responseTime();\r",
							"commonTests.headerValidations();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.userAddress.street = `${parsedBody.userAddress.street}${randomNumber}`; \r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with street containing special characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Street containing special characters error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"Street should contain alphabet characters only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomSpecialCharacters = pm.environment.get(\"randomSpecialCharacters\");\r",
							"\r",
							"parsedBody.userAddress.street = `${parsedBody.userAddress.street}${randomSpecialCharacters}`; \r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with state containing numbers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"State containing numbers error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"State should contain alphabet characters only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.userAddress.state = `${parsedBody.userAddress.state}${randomNumber}`; \r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with state containing special characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"State containing special characters error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"State should contain alphabet characters only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomSpecialCharacters = pm.environment.get(\"randomSpecialCharacters\");\r",
							"\r",
							"parsedBody.userAddress.state = `${parsedBody.userAddress.state}${randomSpecialCharacters}`; \r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with country containing numbers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Country containing numbers error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"Country should contain alphabet characters only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.userAddress.country = `${parsedBody.userAddress.country}${randomNumber}`; \r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with country containing special characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Country containing special characters error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"Country should contain alphabet characters only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomSpecialCharacters = pm.environment.get(\"randomSpecialCharacters\");\r",
							"\r",
							"parsedBody.userAddress.country = `${parsedBody.userAddress.country}${randomSpecialCharacters}`; \r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with zipCode containing alphabets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"ZipCode containing alphabets error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"Zip code should contain numbers only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"desiredLength\", 5);\r",
							"\r",
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomAlphanumeric = pm.environment.get(\"randomAlphanumeric\");\r",
							"\r",
							"parsedBody.userAddress.zipCode = randomAlphanumeric; \r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with zipCode containing special characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"ZipCode containing special characters error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"Zip code should contain numbers only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"desiredLength\", 5);\r",
							"\r",
							"let requestBody = pm.request.body.raw;\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"const randomSpecialCharacters = pm.environment.get(\"randomSpecialCharacters\");\r",
							"\r",
							"parsedBody.userAddress.zipCode = randomSpecialCharacters; \r",
							"\r",
							"const randomAlphabet = pm.environment.get(\"randomAlphabets\");\r",
							"const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"\r",
							"parsedBody.user_email_id = randomAlphabet + parsedBody.user_email_id;\r",
							"parsedBody.user_contact_number = randomNumber;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user without emailID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Missing email ID error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"User email Id is required and should be in proper email format\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"delete parsedBody.user_email_id;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody); \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user without firstName field",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Missing first name error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"First name is required and should contains alphabets only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"delete parsedBody.user_first_name;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody); \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user without lastName field",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.invalidInputsRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"pm.test(\"Missing last name error message\", () => {\r",
							"pm.expect(jsondata.message).to.be.equal(\"Last name is required and should contains alphabets only\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let requestBody = pm.request.body.raw;\r",
							"\r",
							"let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"delete parsedBody.user_last_name;\r",
							"\r",
							"pm.request.body.raw = JSON.stringify(parsedBody); \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\": \"{{firstName}}\",\r\n \"user_last_name\": \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user without authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.unauthorizedRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/createusers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with invalid baseURL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.notFoundRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{invalidBaseURL}}/createusers",
					"host": [
						"{{invalidBaseURL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with invalid endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.notFoundRequest();\r",
							"commonTests.responseTime();\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{invalidEndpoint}}",
					"host": [
						"{{baseURL}}{{invalidEndpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    { name: \"get all\", url: pm.environment.get(\"baseURL\") + \"/users\"},\r",
							"    { name: \"get with invalid baseURL\", url: pm.environment.get(\"invalidBaseURL\") + \"/users\"},\r",
							"    { name: \"get with invalid endpoint\", url: pm.environment.get(\"baseURL\") + pm.environment.get(\"invalidEndpoint\")}\r",
							"];\r",
							"\r",
							"if (!pm.environment.get(\"scenarioIndex\")) {\r",
							"    pm.environment.set(\"scenarioIndex\", 0);\r",
							"}\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"    pm.request.url = currentScenario.url;\r",
							"} else {\r",
							"    pm.execution.setNextRequest(\"Get all users without authorization\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    { name: \"get all users\", expected: commonTests.validGetPutRequest },    \r",
							"    { name: \"get all users with invalid baseURL\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"get all users with invalid endpoint\", expected: commonTests.notFoundRequest }\r",
							"];\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"\r",
							"    try {\r",
							"        currentScenario.expected(); \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"    } catch (error) {\r",
							"        console.error(`Test failed for ${currentScenario.name}: ${error.message}`);\r",
							"    }\r",
							"\r",
							"    pm.environment.set(\"scenarioIndex\", scenarioIndex + 1);\r",
							"\r",
							"    pm.execution.setNextRequest(pm.info.requestName);\r",
							"} else {\r",
							"    pm.environment.unset(\"scenarioIndex\"); \r",
							"    pm.execution.setNextRequest(\"Get all users without authorization\"); \r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "Get all users without authorization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.unauthorizedRequest();\r",
							"commonTests.responseTime();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by ID without authorization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.unauthorizedRequest();\r",
							"commonTests.responseTime();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/user/{{userID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by firstName without authorization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.unauthorizedRequest();\r",
							"commonTests.responseTime();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/username/{{firstName}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"username",
						"{{firstName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    { name: \"get by ID\", url: pm.environment.get(\"baseURL\") + \"/user/\" + pm.collectionVariables.get(\"userID\")},\r",
							"    { name: \"get by ID with invalid baseURL\", url: pm.environment.get(\"invalidBaseURL\") + \"/user/\" + pm.collectionVariables.get(\"userID\")},\r",
							"    { name: \"get by ID with invalid endpoint\", url: pm.environment.get(\"baseURL\") + pm.environment.get(\"invalidEndpoint\") + \"/\" + pm.collectionVariables.get(\"userID\")},\r",
							"    { name: \"get by ID with special characters\", url: pm.environment.get(\"baseURL\") + \"/user/\" + pm.collectionVariables.get(\"userIDSplChar\")},\r",
							"    { name: \"get by ID with alphabets\", url: pm.environment.get(\"baseURL\")  + \"/user/\" + pm.collectionVariables.get(\"userIDChar\")},\r",
							"    { name: \"get by non-existing ID\", url: pm.environment.get(\"baseURL\")  + \"/user/\" + pm.collectionVariables.get(\"userIDNon\")},\r",
							"];\r",
							"\r",
							"if (!pm.environment.get(\"scenarioIndex\")) {\r",
							"    pm.environment.set(\"scenarioIndex\", 0);\r",
							"}\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"    pm.request.url = currentScenario.url;\r",
							"} else {\r",
							"    pm.execution.setNextRequest(\"Get user by firstName\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    { name: \"get by ID\", expected: commonTests.validGetPutRequest },    \r",
							"    { name: \"get by ID with invalid baseURL\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"get by ID with invalid endpoint\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"get by ID with special characters\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"get by ID with alphabets\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"get by non-existing ID\", expected: commonTests.notFoundRequest },\r",
							"];\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"\r",
							"   try {\r",
							"    if (currentScenario.name === \"get by ID\" || \r",
							"        currentScenario.name === \"get by ID with invalid baseURL\" || \r",
							"        currentScenario.name === \"get by ID with invalid endpoint\") {\r",
							"        \r",
							"        currentScenario.expected();\r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"        \r",
							"    } else if (currentScenario.name === \"get by ID with special characters\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"        const userID = pm.collectionVariables.get(\"userIDSplChar\");\r",
							"        \r",
							"        pm.test(\"User ID with special characters error message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User with userId ${userID} not found!`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"        \r",
							"    } else if (currentScenario.name === \"get by ID with alphabets\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"        const userID = pm.collectionVariables.get(\"userIDChar\");\r",
							"        \r",
							"        pm.test(\"User ID with alphabets error message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User with userId ${userID} not found!`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"        \r",
							"    } else if (currentScenario.name === \"get by non-existing ID\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"        const userID = pm.collectionVariables.get(\"userIDNon\");\r",
							"        \r",
							"        pm.test(\"User ID non-existing error message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User with userId ${userID} not found!`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);        \r",
							"    }\r",
							"} catch (error) {\r",
							"    console.error(`Test failed for ${currentScenario.name}: ${error.message}`);\r",
							"}\r",
							"    pm.environment.set(\"scenarioIndex\", scenarioIndex + 1);\r",
							"\r",
							"    pm.execution.setNextRequest(pm.info.requestName);\r",
							"} else {\r",
							"    pm.environment.unset(\"scenarioIndex\"); \r",
							"    pm.execution.setNextRequest(\"Get user by firstName\"); \r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "Get user by firstName",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    { name: \"get by firstName\", url: pm.environment.get(\"baseURL\") + \"/users/username/\" + pm.collectionVariables.get(\"firstName\")},\r",
							"    { name: \"get by firstName with invalid baseURL\", url: pm.environment.get(\"invalidBaseURL\") + \"/users/username/\" + pm.collectionVariables.get(\"firstName\")},\r",
							"    { name: \"get by firstName with invalid endpoint\", url: pm.environment.get(\"baseURL\") + pm.environment.get(\"invalidEndpoint\") + \"/\" + pm.collectionVariables.get(\"firstName\")},\r",
							"    { name: \"get by firstName with special characters\", url: pm.environment.get(\"baseURL\") + \"/users/username/\" + pm.collectionVariables.get(\"userFirstNameSplChar\")},\r",
							"    { name: \"get by firstName with numbers\", url: pm.environment.get(\"baseURL\")  + \"/users/username/\" + pm.collectionVariables.get(\"userFirstNameNumber\")},\r",
							"    { name: \"get by non-existing firstName\", url: pm.environment.get(\"baseURL\")  + \"/users/username/\" + pm.collectionVariables.get(\"userFirstNameNon\")},\r",
							"];\r",
							"\r",
							"if (!pm.environment.get(\"scenarioIndex\")) {\r",
							"    pm.environment.set(\"scenarioIndex\", 0);\r",
							"}\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"    pm.request.url = currentScenario.url;\r",
							"} else {\r",
							"    pm.execution.setNextRequest(\"Update user with valid request body\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    { name: \"get by firstName\", expected: commonTests.validGetPutRequest },    \r",
							"    { name: \"get by firstName with invalid baseURL\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"get by firstName with invalid endpoint\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"get by firstName with special characters\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"get by firstName with numbers\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"get by non-existing firstName\", expected: commonTests.notFoundRequest },\r",
							"];\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"\r",
							"   try {\r",
							"    if (currentScenario.name === \"get by firstName\" || \r",
							"        currentScenario.name === \"get by firstName with invalid baseURL\" || \r",
							"        currentScenario.name === \"get by firstName with invalid endpoint\") {\r",
							"        \r",
							"        currentScenario.expected();\r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"        \r",
							"    } else if (currentScenario.name === \"get by firstName with special characters\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"        const userFirstName = pm.collectionVariables.get(\"userFirstNameSplChar\");\r",
							"        \r",
							"        pm.test(\"User first name with special characters error message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User with userFirstName ${userFirstName} not found!`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"        \r",
							"    } else if (currentScenario.name === \"get by firstName with numbers\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"        const userFirstName = pm.collectionVariables.get(\"userFirstNameNumber\");\r",
							"        \r",
							"        pm.test(\"User first name with numbers error message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User with userFirstName ${userFirstName} not found!`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"        \r",
							"    } else if (currentScenario.name === \"get by non-existing firstName\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"        const userFirstName = pm.collectionVariables.get(\"userFirstNameNon\");\r",
							"        \r",
							"        pm.test(\"User first name non-existing error message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User with userFirstName ${userFirstName} not found!`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);        \r",
							"    }\r",
							"} catch (error) {\r",
							"    console.error(`Test failed for ${currentScenario.name}: ${error.message}`);\r",
							"}\r",
							"    pm.environment.set(\"scenarioIndex\", scenarioIndex + 1);\r",
							"\r",
							"    pm.execution.setNextRequest(pm.info.requestName);\r",
							"} else {\r",
							"    pm.environment.unset(\"scenarioIndex\"); \r",
							"    pm.execution.setNextRequest(\"Update user with valid request body\"); \r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "Update user with valid request body",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    { name: \"update firstName\"},\r",
							"    { name: \"update lastName\"},\r",
							"    { name: \"update contactNumber\"},\r",
							"    { name: \"update emailID\"},\r",
							"    { name: \"update plotNumber\"},\r",
							"    { name: \"update street\"},\r",
							"    { name: \"update state\"},\r",
							"    { name: \"update country\"},\r",
							"    { name: \"update zipCode\"},\r",
							"    { name: \"update without plotNumber\"},\r",
							"    { name: \"update without street\"},\r",
							"    { name: \"update without state\"},\r",
							"    { name: \"update without country\"},\r",
							"    { name: \"update without zipCode\"}\r",
							"];\r",
							"\r",
							"if (!pm.environment.get(\"scenarioIndex\")) {\r",
							"    pm.environment.set(\"scenarioIndex\", 0);\r",
							"}\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"\r",
							"    try {\r",
							"        let requestBody = pm.request.body.raw;\r",
							"        let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"        const randomAlphabets = pm.environment.get(\"randomAlphabets\") || \"\"; // Ensure a default value\r",
							"        const randomNumber = pm.environment.get(\"randomNumber\") || \"\"; // Ensure a default value\r",
							"        \r",
							"        // Set expected values based on the current scenario\r",
							"        if (currentScenario.name === \"update firstName\") {\r",
							"            let newFirstName = parsedBody.user_first_name + randomAlphabets; // Construct new value\r",
							"            pm.environment.set(\"expectedFirstName\", newFirstName); // Save the new value\r",
							"            parsedBody.user_first_name = newFirstName; // Update parsedBody\r",
							"        } else if (currentScenario.name === \"update lastName\") {\r",
							"            let newLastName = parsedBody.user_last_name + randomAlphabets;\r",
							"            pm.environment.set(\"expectedLastName\", newLastName);\r",
							"            parsedBody.user_last_name = newLastName;\r",
							"        } else if (currentScenario.name === \"update contactNumber\") {\r",
							"            parsedBody.user_contact_number = randomNumber;\r",
							"            pm.environment.set(\"expectedContactNumber\", randomNumber);\r",
							"        } else if (currentScenario.name === \"update emailID\") {\r",
							"            let newEmail = randomAlphabets + parsedBody.user_email_id;\r",
							"            pm.environment.set(\"expectedEmail\", newEmail);\r",
							"            parsedBody.user_email_id = newEmail;\r",
							"        } else if (currentScenario.name === \"update plotNumber\") {\r",
							"            let newPlotNumber = parsedBody.userAddress.plotNumber + randomAlphabets;\r",
							"            pm.environment.set(\"expectedPlotNumber\", newPlotNumber);\r",
							"            parsedBody.userAddress.plotNumber = newPlotNumber;\r",
							"        } else if (currentScenario.name === \"update street\") {\r",
							"            let newStreet = parsedBody.userAddress.street + randomAlphabets;\r",
							"            pm.environment.set(\"expectedStreet\", newStreet);\r",
							"            parsedBody.userAddress.street = newStreet;\r",
							"        } else if (currentScenario.name === \"update state\") {\r",
							"            let newState = parsedBody.userAddress.state + randomAlphabets;\r",
							"            pm.environment.set(\"expectedState\", newState);\r",
							"            parsedBody.userAddress.state = newState;\r",
							"        } else if (currentScenario.name === \"update country\") {\r",
							"            let newCountry = parsedBody.userAddress.country + randomAlphabets;\r",
							"            pm.environment.set(\"expectedCountry\", newCountry);\r",
							"            parsedBody.userAddress.country = newCountry;\r",
							"        } else if (currentScenario.name === \"update zipCode\") {\r",
							"            parsedBody.userAddress.zipCode = randomNumber;\r",
							"            pm.environment.set(\"expectedZipCode\", randomNumber);\r",
							"        } else if (currentScenario.name === \"update without plotNumber\") {\r",
							"            parsedBody.userAddress.plotNumber = \"\"; // Clear the field\r",
							"        } else if (currentScenario.name === \"update without street\") {\r",
							"            parsedBody.userAddress.street = \"\"; // Clear the field\r",
							"        } else if (currentScenario.name === \"update without state\") {\r",
							"            parsedBody.userAddress.state = \"\"; // Clear the field\r",
							"        } else if (currentScenario.name === \"update without country\") {\r",
							"            parsedBody.userAddress.country = \"\"; // Clear the field\r",
							"        } else if (currentScenario.name === \"update without zipCode\") {\r",
							"            parsedBody.userAddress.zipCode = \"\"; // Clear the field\r",
							"        } \r",
							"\r",
							"        pm.request.url = pm.environment.get(\"baseURL\") + \"/updateuser/\" + pm.collectionVariables.get(\"userID\");\r",
							"        pm.request.body.raw = JSON.stringify(parsedBody);\r",
							"    } catch (error) {\r",
							"        throw new Error(\"Failed to parse request body or stringify it: \" + error.message);\r",
							"    }\r",
							"} else {\r",
							"    pm.environment.unset(\"scenarioIndex\");\r",
							"    pm.execution.setNextRequest(\"Update user without authorization\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"const scenarios = [\r",
							"    { name: \"update firstName\"},\r",
							"    { name: \"update lastName\"},\r",
							"    { name: \"update contactNumber\"},\r",
							"    { name: \"update emailID\"},\r",
							"    { name: \"update plotNumber\"},\r",
							"    { name: \"update street\"},\r",
							"    { name: \"update state\"},\r",
							"    { name: \"update country\"},\r",
							"    { name: \"update zipCode\"},\r",
							"    { name: \"update without plotNumber\"},\r",
							"    { name: \"update without street\"},\r",
							"    { name: \"update without state\"},\r",
							"    { name: \"update without country\"},\r",
							"    { name: \"update without zipCode\"}\r",
							"];\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"    try {\r",
							"    if (currentScenario.name === \"update firstName\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"First name should be updated\", function () {\r",
							"            pm.expect(responseJson.user_first_name).to.eql(pm.environment.get(\"expectedFirstName\"));\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update lastName\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"Last name should be updated\", function () {\r",
							"            pm.expect(responseJson.user_last_name).to.eql(pm.environment.get(\"expectedLastName\"));\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update contactNumber\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"Contact number should be updated\", function () {\r",
							"            pm.expect(responseJson.user_contact_number).to.eql(pm.environment.get(\"expectedContactNumber\"));\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update emailID\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"Email ID should be updated\", function () {\r",
							"            pm.expect(responseJson.user_email_id).to.eql(pm.environment.get(\"expectedEmail\"));\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update plotNumber\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"Plot number should be updated\", function () {\r",
							"            pm.expect(responseJson.userAddress.plotNumber).to.eql(pm.environment.get(\"expectedPlotNumber\"));\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update street\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"Street should be updated\", function () {\r",
							"            pm.expect(responseJson.userAddress.street).to.eql(pm.environment.get(\"expectedStreet\"));\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update state\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"State should be updated\", function () {\r",
							"            pm.expect(responseJson.userAddress.state).to.eql(pm.environment.get(\"expectedState\"));\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update country\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"Country should be updated\", function () {\r",
							"            pm.expect(responseJson.userAddress.country).to.eql(pm.environment.get(\"expectedCountry\"));\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update zipCode\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"Zip code should be updated\", function () {\r",
							"            pm.expect(responseJson.userAddress.zipCode).to.eql(pm.environment.get(\"expectedZipCode\"));\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update without plotNumber\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"Plot number should be deleted\", function () {\r",
							"            pm.expect(responseJson.userAddress.plotNumber).to.be.null;\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update without street\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"Street should be deleted\", function () {\r",
							"            pm.expect(responseJson.userAddress.street).to.be.null;\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update without state\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"State should be deleted\", function () {\r",
							"            pm.expect(responseJson.userAddress.state).to.be.null;\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update without country\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"Country should be deleted\", function () {\r",
							"            pm.expect(responseJson.userAddress.country).to.be.null;\r",
							"        });\r",
							"    } else if (currentScenario.name === \"update without zipCode\") {\r",
							"        commonTests.validGetPutRequest();\r",
							"        pm.test(\"Zip code should be deleted\", function () {\r",
							"            pm.expect(responseJson.userAddress.zipCode).to.be.null;\r",
							"        });\r",
							"    }\r",
							"} catch (error) {\r",
							"    console.error(`Test failed for ${currentScenario.name}: ${error.message}`);\r",
							"}\r",
							"    pm.environment.set(\"scenarioIndex\", scenarioIndex + 1);\r",
							"\r",
							"    pm.execution.setNextRequest(pm.info.requestName);\r",
							"} else {\r",
							"    pm.environment.unset(\"scenarioIndex\"); \r",
							"    pm.execution.setNextRequest(\"Update user without authorization\"); \r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "userapi@october",
							"type": "string"
						},
						{
							"key": "username",
							"value": "Numpy@gmail.com",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "Update user without authorization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.unauthorizedRequest();\r",
							"commonTests.responseTime();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/updateuser/{{userID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"updateuser",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user with invalid request body",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    { name: \"without firstName\"},\r",
							"    { name: \"without lastName\"},\r",
							"    { name: \"without contactNumber\"},\r",
							"    { name: \"without emailID\"},\r",
							"    { name: \"firstName with numbers\"},\r",
							"    { name: \"lastName with numbers\"},\r",
							"    { name: \"contact Number with alphabets\"},\r",
							"    { name: \"contact number exceeding 10 digits\"},\r",
							"    { name: \"email with incorrect format\"},\r",
							"    { name: \"plotNumber with alphanumeric\"},\r",
							"    { name: \"street with numbers\"},\r",
							"    { name: \"state with numbers\"},\r",
							"    { name: \"country with numbers\"},\r",
							"    { name: \"zipCode with alphabets\"},\r",
							"    { name: \"firstName with special characters\"},\r",
							"    { name: \"lastName with special characters\"},\r",
							"    { name: \"contact number with special characters\"},\r",
							"    { name: \"email with special characters\"},\r",
							"    { name: \"plotNumber with special characters\"},\r",
							"    { name: \"street with special characters\"},\r",
							"    { name: \"state with special characters\"},\r",
							"    { name: \"country with special characters\"},\r",
							"    { name: \"zipCode with special characters\"},\r",
							"    { name: \"existing email\"},\r",
							"    { name: \"existing contact number\"}\r",
							"];\r",
							"\r",
							"if (!pm.environment.get(\"scenarioIndex\")) {\r",
							"    pm.environment.set(\"scenarioIndex\", 0);\r",
							"}\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"    \r",
							"    try {\r",
							"    let requestBody = pm.request.body.raw;\r",
							"    let parsedBody = JSON.parse(requestBody);\r",
							"\r",
							"    const randomAlphabets = pm.environment.get(\"randomAlphabets\");\r",
							"    const randomNumber = pm.environment.get(\"randomNumber\");\r",
							"    const randomAlphanumeric = pm.environment.get(\"randomAlphanumeric\");\r",
							"    const randomSpecialCharacters = pm.environment.get(\"randomSpecialCharacters\");\r",
							"    \r",
							"    if (currentScenario.name === \"without firstName\") {\r",
							"        parsedBody.user_first_name = \"\";\r",
							"    } else if (currentScenario.name === \"without lastName\") {\r",
							"        parsedBody.user_last_name = \"\";\r",
							"    } else if (currentScenario.name === \"without contactNumber\") {\r",
							"        parsedBody.user_contact_number = \"\";\r",
							"    } else if (currentScenario.name === \"without emailID\") {\r",
							"        parsedBody.user_email_id = \"\";\r",
							"    } else if (currentScenario.name === \"firstName with numbers\") {\r",
							"        parsedBody.user_first_name = parsedBody.user_first_name + randomNumber;\r",
							"    } else if (currentScenario.name === \"lastName with numbers\") {\r",
							"        parsedBody.user_last_name = parsedBody.user_last_name + randomNumber;\r",
							"    } else if (currentScenario.name === \"contact Number with alphabets\") {\r",
							"        parsedBody.user_contact_number = randomAlphanumeric;\r",
							"    } else if (currentScenario.name === \"contact number exceeding 10 digits\") {\r",
							"        parsedBody.user_contact_number = parsedBody.user_contact_number + randomNumber;\r",
							"    } else if (currentScenario.name === \"email with incorrect format\") {\r",
							"        parsedBody.user_email_id = randomAlphanumeric;\r",
							"    } else if (currentScenario.name === \"plotNumber with alphanumeric\") {\r",
							"        parsedBody.userAddress.plotNumber = randomAlphanumeric;\r",
							"    } else if (currentScenario.name === \"street with numbers\") {\r",
							"        parsedBody.userAddress.street = randomNumber;\r",
							"    } else if (currentScenario.name === \"state with numbers\") {\r",
							"        parsedBody.userAddress.state = randomNumber;\r",
							"    } else if (currentScenario.name === \"country with numbers\") {\r",
							"        parsedBody.userAddress.country = randomNumber;\r",
							"    } else if (currentScenario.name === \"zipCode with alphabets\") {\r",
							"        parsedBody.userAddress.zipCode = randomAlphabets;\r",
							"    } else if (currentScenario.name === \"firstName with special characters\") {\r",
							"        parsedBody.user_first_name = randomSpecialCharacters;\r",
							"    } else if (currentScenario.name === \"lastName with special characters\") {\r",
							"        parsedBody.user_last_name = randomSpecialCharacters;\r",
							"    } else if (currentScenario.name === \"contactNumber with special characters\") {\r",
							"        parsedBody.user_contact_number = randomSpecialCharacters;\r",
							"    } else if (currentScenario.name === \"emailID with special characters\") {\r",
							"        parsedBody.user_email_id = randomSpecialCharacters + parsedBody.user_email_id;\r",
							"    } else if (currentScenario.name === \"plotNumber with special characters\") {\r",
							"        parsedBody.userAddress.plotNumber = randomSpecialCharacters;\r",
							"    } else if (currentScenario.name === \"street with special characters\") {\r",
							"        parsedBody.userAddress.street = randomSpecialCharacters;\r",
							"    } else if (currentScenario.name === \"state with special characters\") {\r",
							"        parsedBody.userAddress.state = randomSpecialCharacters;\r",
							"    } else if (currentScenario.name === \"country with special characters\") {\r",
							"        parsedBody.userAddress.country = randomSpecialCharacters;\r",
							"    } else if (currentScenario.name === \"zipCode with special characters\") {\r",
							"        parsedBody.userAddress.zipCode = randomSpecialCharacters;\r",
							"    } else if (currentScenario.name === \"existing email\") {\r",
							"        parsedBody.user_email_id = pm.iterationData.get(\"existing_emailID\");\r",
							"    } else if (currentScenario.name === \"existing contact number\") {\r",
							"        parsedBody.user_contact_number = pm.iterationData.get(\"existing_contactNumber\");\r",
							"    } \r",
							"    pm.request.url = pm.environment.get(\"baseURL\") + \"/updateuser/\" + pm.collectionVariables.get(\"userID\");\r",
							"    pm.request.body.raw = JSON.stringify(parsedBody);\r",
							"     } catch (error) {\r",
							"        throw new Error(\"Failed to parse request body or stringify it: \" + error.message);\r",
							"    }\r",
							"} else {\r",
							"     pm.environment.unset(\"scenarioIndex\");\r",
							"    pm.execution.setNextRequest(\"Update user with invalid URL\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"const scenarios = [\r",
							"    { name: \"without firstName\"},\r",
							"    { name: \"without lastName\"},\r",
							"    { name: \"without contactNumber\"},\r",
							"    { name: \"without emailID\"},\r",
							"    { name: \"firstName with numbers\"},\r",
							"    { name: \"lastName with numbers\"},\r",
							"    { name: \"contact Number with alphabets\"},\r",
							"    { name: \"contact number exceeding 10 digits\"},\r",
							"    { name: \"email with incorrect format\"},\r",
							"    { name: \"plotNumber with alphanumeric\"},\r",
							"    { name: \"street with numbers\"},\r",
							"    { name: \"state with numbers\"},\r",
							"    { name: \"country with numbers\"},\r",
							"    { name: \"zipCode with alphabets\"},\r",
							"    { name: \"firstName with special characters\"},\r",
							"    { name: \"lastName with special characters\"},\r",
							"    { name: \"contact number with special characters\"},\r",
							"    { name: \"email with special characters\"},\r",
							"    { name: \"plotNumber with special characters\"},\r",
							"    { name: \"street with special characters\"},\r",
							"    { name: \"state with special characters\"},\r",
							"    { name: \"country with special characters\"},\r",
							"    { name: \"zipCode with special characters\"},\r",
							"    { name: \"existing email\"},\r",
							"    { name: \"existing contact number\"}\r",
							"];\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"    try {\r",
							"        var jsondata = pm.response.json();\r",
							"    if (currentScenario.name === \"without firstName\") {\r",
							"       commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Missing first name error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"User First Name is mandatory and should contains alphabets only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"without lastName\") {\r",
							"         commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Missing last name error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"User Last Name is mandatory and should contains alphabets only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"without contactNumber\") {\r",
							"       commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Missing contact number error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Phone Number is required and should contains 10 numeric values only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"without emailID\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Missing email ID error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"User email Id is required\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"firstName with numbers\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Missing first name error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"User First Name is mandatory and should contains alphabets only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"lastName with numbers\") {\r",
							"         commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Missing last name error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"User Last Name is mandatory and should contains alphabets only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"contact Number with alphabets\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Missing contact number error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Phone Number is required and should contains 10 numeric values only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"contact number exceeding 10 digits\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Missing contact number error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Phone Number is required and should contains 10 numeric values only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"email with incorrect format\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Email ID with incorrect format error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"User email Id is required\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"plotNumber with alphanumeric\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"PlotNumber containing only alphanumeral without hypen error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Plot number should contain alphaNumeric values with '-' only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"street with numbers\") {\r",
							"        commonTests.validGetPutRequest();       \r",
							"    } else if (currentScenario.name === \"state with numbers\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"State containing numbers error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"State should contain alphabet characters only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"country with numbers\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Country containing numbers error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Country should contain alphabet characters only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"zipCode with alphabets\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"ZipCode containing alphabets error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Zip code should contain numbers only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"firstName with special characters\") {\r",
							"         commonTests.invalidInputsRequest();\r",
							"        pm.test(\"First name with special characters error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"User First Name is mandatory and should contains alphabets only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"lastName with special characters\") {\r",
							"         commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Last name with special characters error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"User Last Name is mandatory and should contains alphabets only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"contact number with special characters\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Contact number with special characters error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Phone Number is required and should contains 10 numeric values only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"email with special characters\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Email ID containing special characters error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"User email Id is required and should be in proper email format\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"plotNumber with special characters\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"PlotNumber containing special characters error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Plot number should contain alphaNumeric values with '-' only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"street with special characters\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Street containing special characters error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Street should contain alphabet characters only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"state with special characters\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"State containing special characters error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"State should contain alphabet characters only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"country with special characters\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Country containing special characters error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Country should contain alphabet characters only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"zipCode with special characters\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"ZipCode containing special characters error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Zip code should contain numbers only\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"existing email\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Existing email ID error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Email Id is already in use by another user\");\r",
							"        });\r",
							"    } else if (currentScenario.name === \"existing contact number\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"        pm.test(\"Existing contact number error message\", () => {\r",
							"        pm.expect(jsondata.message).to.be.equal(\"Contact number is already in use by another user\");\r",
							"        });\r",
							"    }\r",
							"} catch (error) {\r",
							"    console.error(`Test failed for ${currentScenario.name}: ${error.message}`);\r",
							"}\r",
							"    pm.environment.set(\"scenarioIndex\", scenarioIndex + 1);\r",
							"\r",
							"    pm.execution.setNextRequest(pm.info.requestName);\r",
							"} else {\r",
							"    pm.environment.unset(\"scenarioIndex\"); \r",
							"    pm.execution.setNextRequest(\"Update user with invalid URL\"); \r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "userapi@october",
							"type": "string"
						},
						{
							"key": "username",
							"value": "Numpy@gmail.com",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "Update user with invalid URL",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    //{ name: \"with invalid baseURL\"},\r",
							"    { name: \"with invalid endpoint\"},\r",
							"    { name: \"with invalid userID\"},\r",
							"    { name: \"with non-existing userID\"}    \r",
							"];\r",
							"\r",
							"if (!pm.environment.get(\"scenarioIndex\")) {\r",
							"    pm.environment.set(\"scenarioIndex\", 0);\r",
							"}\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"    \r",
							"    try {\r",
							"   /* if (currentScenario.name === \"with invalid baseURL\") {\r",
							"       pm.request.url = pm.environment.get(\"invalidBaseURL\") + \"/updateuser/\" + pm.collectionVariables.get(\"userID\");; \r",
							"    } else */ if (currentScenario.name === \"with invalid endpoint\") {\r",
							"        pm.request.url = pm.environment.get(\"baseURL\") + pm.environment.get(\"invalidEndpoint\") +\"/\"+ pm.collectionVariables.get(\"userID\"); \r",
							"    } else if (currentScenario.name === \"with invalid userID\") {\r",
							"        pm.request.url = pm.environment.get(\"baseURL\") + \"/updateuser/\" + pm.collectionVariables.get(\"userIDChar\");\r",
							"    } else if (currentScenario.name === \"with non-existing userID\") {\r",
							"        pm.request.url = pm.environment.get(\"baseURL\") + \"/updateuser/\" + pm.collectionVariables.get(\"userIDNon\");\r",
							"    } \r",
							"     } catch (error) {\r",
							"        throw new Error(\"Failed to send request URL: \" + error.message);\r",
							"    }\r",
							"} else {\r",
							"     pm.environment.unset(\"scenarioIndex\");\r",
							"    pm.execution.setNextRequest(\"Delete user by ID without authorization\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"const scenarios = [\r",
							"     //{ name: \"with invalid baseURL\"},\r",
							"    { name: \"with invalid endpoint\"},\r",
							"    { name: \"with invalid userID\"},\r",
							"    { name: \"with non-existing userID\"}\r",
							"];\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"    try {\r",
							"    //if (currentScenario.name === \"with invalid baseURL\") {\r",
							"        //commonTests.notFoundRequest();       \r",
							"    //} else \r",
							"    if (currentScenario.name === \"with invalid endpoint\") {\r",
							"        commonTests.notFoundRequest();     \r",
							"    } else if (currentScenario.name === \"with invalid userID\") {\r",
							"        commonTests.invalidInputsRequest();\r",
							"    } else if (currentScenario.name === \"with non-existing userID\") {\r",
							"        commonTests.notFoundRequest();\r",
							"        const userID = pm.collectionVariables.get(\"userIDNon\");\r",
							"        pm.test(\"User ID not found message\", function () {\r",
							"            pm.expect(responseJson.message).to.be.eql(`User not found with id: ${userID}`);\r",
							"        });\r",
							"    } \r",
							"} catch (error) {\r",
							"    console.error(`Test failed for ${currentScenario.name}: ${error.message}`);\r",
							"}\r",
							"    pm.environment.set(\"scenarioIndex\", scenarioIndex + 1);\r",
							"\r",
							"    pm.execution.setNextRequest(pm.info.requestName);\r",
							"} else {\r",
							"    pm.environment.unset(\"scenarioIndex\"); \r",
							"    pm.execution.setNextRequest(\"Delete user by ID without authorization\"); \r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "userapi@october",
							"type": "string"
						},
						{
							"key": "username",
							"value": "Numpy@gmail.com",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{firstName}}\",\r\n \"user_last_name\":  \"{{lastName}}\",        \r\n \"user_contact_number\": \"{{contactNumber}}\",   \r\n \"user_email_id\": \"{{emailID}}\",\r\n\r\n\"userAddress\": {\r\n   \"plotNumber\": \"{{plotNumber}}\",\r\n   \"street\": \"{{street}}\",\r\n   \"state\": \"{{state}}\",\r\n    \"country\": \"{{country}}\",\r\n   \"zipCode\": \"{{zipCode}}\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "Delete user by ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    { name: \"delete by ID\", url: pm.environment.get(\"baseURL\") + \"/deleteuser/\" + pm.collectionVariables.get(\"userID\")},\r",
							"    { name: \"delete by ID with invalid baseURL\", url: pm.environment.get(\"invalidBaseURL\") + \"/deleteuser/\" + pm.collectionVariables.get(\"userID\")},\r",
							"    { name: \"delete by ID with invalid endpoint\", url: pm.environment.get(\"baseURL\") + pm.environment.get(\"invalidEndpoint\") + \"/\" + pm.collectionVariables.get(\"userID\")},\r",
							"    { name: \"delete by ID with special characters\", url: pm.environment.get(\"baseURL\") + \"/deleteuser/\" + pm.collectionVariables.get(\"userIDSplChar\")},\r",
							"    { name: \"delete by ID with alphabets\", url: pm.environment.get(\"baseURL\")  + \"/deleteuser/\" + pm.collectionVariables.get(\"userIDChar\")},\r",
							"    { name: \"delete by non-existing ID\", url: pm.environment.get(\"baseURL\")  + \"/deleteuser/\" + pm.collectionVariables.get(\"userIDNon\")},\r",
							"];\r",
							"\r",
							"if (!pm.environment.get(\"scenarioIndex\")) {\r",
							"    pm.environment.set(\"scenarioIndex\", 0);\r",
							"}\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"    pm.request.url = currentScenario.url;\r",
							"} else {\r",
							"    pm.execution.setNextRequest(\"Delete user by firstName\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    { name: \"delete by ID\", expected: commonTests.validGetPutRequest },    \r",
							"    { name: \"delete by ID with invalid baseURL\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"delete by ID with invalid endpoint\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"delete by ID with special characters\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"delete by ID with alphabets\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"delete by non-existing ID\", expected: commonTests.notFoundRequest },\r",
							"];\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"\r",
							"   try {\r",
							"    if (currentScenario.name === \"delete by ID\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"               \r",
							"        pm.test(\"User deleted success message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User is deleted successfully`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"\r",
							"    } else if (currentScenario.name === \"delete by ID with invalid baseURL\" || \r",
							"        currentScenario.name === \"delete by ID with invalid endpoint\") {\r",
							"        \r",
							"        currentScenario.expected();\r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"        \r",
							"    } else if (currentScenario.name === \"delete by ID with special characters\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"        const userID = pm.collectionVariables.get(\"userIDSplChar\");\r",
							"        \r",
							"        pm.test(\"User ID with special characters error message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User not found with id: ${userID}`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"        \r",
							"    } else if (currentScenario.name === \"delete by ID with alphabets\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"        const userID = pm.collectionVariables.get(\"userIDChar\");\r",
							"        \r",
							"        pm.test(\"User ID with alphabets error message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User not found with id: ${userID}`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"        \r",
							"    } else if (currentScenario.name === \"delete by non-existing ID\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"        const userID = pm.collectionVariables.get(\"userIDNon\");\r",
							"        \r",
							"        pm.test(\"User ID non-existing error message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User not found with id: ${userID}`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);        \r",
							"    }\r",
							"} catch (error) {\r",
							"    console.error(`Test failed for ${currentScenario.name}: ${error.message}`);\r",
							"}\r",
							"    pm.environment.set(\"scenarioIndex\", scenarioIndex + 1);\r",
							"\r",
							"    pm.execution.setNextRequest(pm.info.requestName);\r",
							"} else {\r",
							"    pm.environment.unset(\"scenarioIndex\"); \r",
							"    pm.execution.setNextRequest(\"Delete user by firstName\"); \r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "Delete user by firstName",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    { name: \"delete by firstName\", url: pm.environment.get(\"baseURL\") + \"/deleteuser/username/\" + pm.collectionVariables.get(\"firstName\")},\r",
							"    { name: \"delete by firstName with invalid baseURL\", url: pm.environment.get(\"invalidBaseURL\") + \"/deleteuser/username/\" + pm.collectionVariables.get(\"firstName\")},\r",
							"    { name: \"delete by firstName with invalid endpoint\", url: pm.environment.get(\"baseURL\") + pm.environment.get(\"invalidEndpoint\") + \"/\" + pm.collectionVariables.get(\"firstName\")},\r",
							"    { name: \"delete by firstName with special characters\", url: pm.environment.get(\"baseURL\") + \"/deleteuser/username/\" + pm.collectionVariables.get(\"userFirstNameSplChar\")},\r",
							"    { name: \"delete by firstName with numbers\", url: pm.environment.get(\"baseURL\")  + \"/deleteuser/username/\" + pm.collectionVariables.get(\"userFirstNameChar\")},\r",
							"    { name: \"delete by non-existing firstName\", url: pm.environment.get(\"baseURL\")  + \"/deleteuser/username/\" + pm.collectionVariables.get(\"userFirstNameNon\")},\r",
							"];\r",
							"\r",
							"if (!pm.environment.get(\"scenarioIndex\")) {\r",
							"    pm.environment.set(\"scenarioIndex\", 0);\r",
							"}\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"    pm.request.url = currentScenario.url;\r",
							"} else {\r",
							"    pm.execution.setNextRequest(null);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const scenarios = [\r",
							"    { name: \"delete by firstName\", expected: commonTests.validGetPutRequest },    \r",
							"    { name: \"delete by firstName with invalid baseURL\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"delete by firstName with invalid endpoint\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"delete by firstName with special characters\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"delete by firstName with numbers\", expected: commonTests.notFoundRequest },\r",
							"    { name: \"delete by non-existing firstName\", expected: commonTests.notFoundRequest },\r",
							"];\r",
							"\r",
							"let scenarioIndex = pm.environment.get(\"scenarioIndex\");\r",
							"\r",
							"if (scenarioIndex < scenarios.length) {\r",
							"    let currentScenario = scenarios[scenarioIndex];\r",
							"\r",
							"   try {\r",
							"    if (currentScenario.name === \"delete by firstName\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"               \r",
							"        pm.test(\"User deleted success message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User is deleted successfully`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"\r",
							"    } else if (currentScenario.name === \"delete by firstName with invalid baseURL\" || \r",
							"        currentScenario.name === \"delete by firstName with invalid endpoint\") {\r",
							"        \r",
							"        currentScenario.expected();\r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"        \r",
							"    } else if (currentScenario.name === \"delete by firstName with special characters\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"        const userFirstName = pm.collectionVariables.get(\"userFirstNameSplChar\");\r",
							"        \r",
							"        pm.test(\"User firstName with special characters error message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User does not exist with name '${userFirstName}'`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"        \r",
							"    } else if (currentScenario.name === \"delete by firstName with numbers\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"        const userFirstName = pm.collectionVariables.get(\"userFirstNameNumber\");\r",
							"        \r",
							"        pm.test(\"User firstName with alphabets error message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User does not exist with name '${userFirstName}'`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);\r",
							"        \r",
							"    } else if (currentScenario.name === \"delete firstName non-existing ID\") {\r",
							"        currentScenario.expected();\r",
							"        var jsondata = pm.response.json();\r",
							"        const userFirstName = pm.collectionVariables.get(\"userFirstNameNon\");\r",
							"        \r",
							"        pm.test(\"User firstName non-existing error message\", () => {\r",
							"            pm.expect(jsondata.message).to.be.equal(`User does not exist with name '${userFirstName}'`);\r",
							"        });\r",
							"        \r",
							"        console.log(`Test passed for: ${currentScenario.name}`);        \r",
							"    }\r",
							"} catch (error) {\r",
							"    console.error(`Test failed for ${currentScenario.name}: ${error.message}`);\r",
							"}\r",
							"    pm.environment.set(\"scenarioIndex\", scenarioIndex + 1);\r",
							"\r",
							"    pm.execution.setNextRequest(pm.info.requestName);\r",
							"} else {\r",
							"    pm.environment.unset(\"scenarioIndex\"); \r",
							"    pm.execution.setNextRequest(null); \r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "Delete user by ID without authorization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.unauthorizedRequest();\r",
							"commonTests.responseTime();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/user/{{userID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user by firstName without authorization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.unauthorizedRequest();\r",
							"commonTests.responseTime();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/username/{{firstName}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"username",
						"{{firstName}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{userName}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//To generate random alphanumeric\r",
					"function generateRandomAlphanumeric(length) {\r",
					"    const characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
					"    let result = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
					"        result += characters[randomIndex];\r",
					"    }\r",
					"    return result;\r",
					"}\r",
					"\r",
					"const desiredLength = pm.environment.get(\"desiredLength\") || 10; // Default to 10 if not set\r",
					"\r",
					"const randomAlphanumeric = generateRandomAlphanumeric(desiredLength);\r",
					"pm.environment.set(\"randomAlphanumeric\", randomAlphanumeric);\r",
					"\r",
					"//To generate random number\r",
					"function generateRandom10DigitNumber() {\r",
					"    const min = 1000000000; // Minimum 10-digit number\r",
					"    const max = 9999999999; // Maximum 10-digit number\r",
					"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
					"}\r",
					"\r",
					"const random10DigitNumber = generateRandom10DigitNumber();\r",
					"\r",
					"pm.environment.set(\"randomNumber\", random10DigitNumber);\r",
					"\r",
					"\r",
					"// Function to generate a random special character\r",
					"function generateRandomSpecialCharacter() {\r",
					"    const specialCharacters = '!@#$%^&*()-_=+[]{}|;:\",.<>?';\r",
					"    const randomIndex = Math.floor(Math.random() * specialCharacters.length);\r",
					"    return specialCharacters[randomIndex];\r",
					"}\r",
					" \r",
					"let randomSpecialChars = '';\r",
					"for (let i = 0; i < 3; i++) {\r",
					"    randomSpecialChars += generateRandomSpecialCharacter();\r",
					"}\r",
					"\r",
					"pm.environment.set(\"randomSpecialCharacters\", randomSpecialChars);\r",
					"\r",
					"//Function to generate random alphabets\r",
					"function generateRandomAlphabets(length) {\r",
					"    const characters = 'abcdefghijklmnopqrstuvwxyz';\r",
					"    let result = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
					"        result += characters[randomIndex];\r",
					"    }\r",
					"    return result;\r",
					"}\r",
					"\r",
					"const alphaLength = 3; \r",
					"const randomAlphabets = generateRandomAlphabets(alphaLength);\r",
					"pm.environment.set(\"randomAlphabets\", randomAlphabets);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"commonTests = \r",
					"{\r",
					"    validPostRequest: function() {\r",
					"       pm.test(\"Status code is 201\", () => {\r",
					"            pm.response.to.have.status(201);\r",
					"        }); \r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"Created\");\r",
					"        });          \r",
					"    },\r",
					"    validGetPutRequest: function () {\r",
					"        //Status code\r",
					"        pm.test(\"Status code is 200\", () => {\r",
					"            pm.response.to.have.status(200);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"OK\");\r",
					"        });\r",
					"\r",
					"        //Header \r",
					"        pm.test(\"Content-Type is present\", () => {\r",
					"            pm.response.to.have.header(\"Content-Type\");\r",
					"        });\r",
					"\r",
					"        pm.test(\"Content-Type header is application/json\", () => {\r",
					"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
					"        });\r",
					"\r",
					"        //Response time\r",
					"        pm.test(\"Response time is less than 1000ms\", () => {\r",
					"            pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"        });\r",
					"    },\r",
					"    unauthorizedRequest: function () {\r",
					"        //Unauthorized\r",
					"        pm.test(\"Status code is 401\", () => {\r",
					"            pm.response.to.have.status(401);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"Unauthorized\");\r",
					"        });\r",
					"    },\r",
					"    notFoundRequest: function () {\r",
					"        //Invalid URL \r",
					"        pm.test(\"Status code is 404\", () => {\r",
					"            pm.response.to.have.status(404);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"Not Found\");\r",
					"        });\r",
					"    },\r",
					"    invalidInputsRequest: function () {\r",
					"        //Unauthorized\r",
					"        pm.test(\"Status code is 400\", () => {\r",
					"            pm.response.to.have.status(400);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"Bad Request\");\r",
					"        });\r",
					"    },\r",
					"    conflictRequest: function () {\r",
					"        pm.test(\"Status code is 409\", () => {\r",
					"            pm.response.to.have.status(409);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"Conflict\");\r",
					"        });\r",
					"    },\r",
					"    responseTime: function() {\r",
					"        pm.test(\"Response time is less than 200ms\", function () {\r",
					"            pm.expect(pm.response.responseTime).to.be.below(200);\r",
					"        });\r",
					"    },\r",
					"    headerValidations: function() {\r",
					"        //Header \r",
					"        pm.test(\"Content-Type is present\", () => {\r",
					"            pm.response.to.have.header(\"Content-Type\");\r",
					"        });\r",
					"\r",
					"        pm.test(\"Content-Type header is application/json\", () => {\r",
					"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
					"        });\r",
					"\r",
					"    },\r",
					"    schemaValidation: function() {\r",
					"        pm.test(\"Response schema is valid\", function () {\r",
					"    const schema = {\r",
					"        \"$ref\": \"#/definitions/Welcome7\",\r",
					"        \"definitions\": {\r",
					"            \"Welcome7\": {\r",
					"                \"type\": \"object\",\r",
					"                \"additionalProperties\": false,\r",
					"                \"properties\": {\r",
					"                    \"userAddress\": {\r",
					"                        \"$ref\": \"#/definitions/UserAddress\"\r",
					"                    },\r",
					"                    \"user_id\": {\r",
					"                        \"type\": \"integer\"\r",
					"                    },\r",
					"                    \"user_first_name\": {\r",
					"                        \"type\": \"string\"\r",
					"                    },\r",
					"                    \"user_last_name\": {\r",
					"                        \"type\": \"string\"\r",
					"                    },\r",
					"                    \"user_contact_number\": {\r",
					"                        \"type\": \"integer\"\r",
					"                    },\r",
					"                    \"user_email_id\": {\r",
					"                        \"type\": \"string\"\r",
					"                    },\r",
					"                    \"creation_time\": {\r",
					"                        \"type\": \"string\",\r",
					"                        \"format\": \"date-time\"\r",
					"                    },\r",
					"                    \"last_mod_time\": {\r",
					"                        \"type\": \"string\",\r",
					"                        \"format\": \"date-time\"\r",
					"                    }\r",
					"                },\r",
					"                \"required\": [\r",
					"                    \"creation_time\",\r",
					"                    \"last_mod_time\",\r",
					"                    \"user_contact_number\",\r",
					"                    \"user_email_id\",\r",
					"                    \"user_first_name\",\r",
					"                    \"user_id\",\r",
					"                    \"user_last_name\"\r",
					"                ],\r",
					"                \"title\": \"Welcome7\"\r",
					"            },\r",
					"            \"UserAddress\": {\r",
					"                \"type\": \"object\",\r",
					"                \"additionalProperties\": false,\r",
					"                \"properties\": {\r",
					"                    \"addressId\": {\r",
					"                        \"type\": \"integer\"\r",
					"                    },\r",
					"                    \"plotNumber\": {\r",
					"                        \"oneOf\": [\r",
					"                            { \"type\": \"string\" },\r",
					"                            { \"type\": \"null\" }\r",
					"                        ]\r",
					"                    },\r",
					"                    \"street\": {\r",
					"                       \"oneOf\": [\r",
					"                            { \"type\": \"string\" },\r",
					"                            { \"type\": \"null\" }\r",
					"                        ]\r",
					"                    },\r",
					"                    \"state\": {\r",
					"                       \"oneOf\": [\r",
					"                            { \"type\": \"string\" },\r",
					"                            { \"type\": \"null\" }\r",
					"                        ]\r",
					"                    },\r",
					"                    \"country\": {\r",
					"                        \"oneOf\": [\r",
					"                            { \"type\": \"string\" },\r",
					"                            { \"type\": \"null\" }\r",
					"                        ]\r",
					"                    },\r",
					"                    \"zipCode\": {\r",
					"                        \"oneOf\": [\r",
					"                            { \"type\": \"integer\" },\r",
					"                            { \"type\": \"null\" }\r",
					"                        ]\r",
					"                    }\r",
					"                },\r",
					"                \"title\": \"UserAddress\"\r",
					"            }\r",
					"        }\r",
					"    };\r",
					"\r",
					"    pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
					"});\r",
					"    }\r",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "userID",
			"value": ""
		},
		{
			"key": "firstName",
			"value": "",
			"type": "string"
		},
		{
			"key": "userIDSplChar",
			"value": "7365@#$%",
			"type": "string"
		},
		{
			"key": "userIDChar",
			"value": "7365abc",
			"type": "string"
		},
		{
			"key": "userIDNon",
			"value": "9999999",
			"type": "string"
		},
		{
			"key": "userFirstNameSplChar",
			"value": "minni%^&*",
			"type": "string"
		},
		{
			"key": "userFirstNameNumber",
			"value": "minni12345",
			"type": "string"
		},
		{
			"key": "userFirstNameNon",
			"value": "jemimatestname",
			"type": "string"
		}
	]
}